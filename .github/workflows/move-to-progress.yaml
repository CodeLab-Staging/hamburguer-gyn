name: Pipeline - Move Issue to In Progress

on:
  issues:
    types: [assigned]

permissions:
  issues: write
  repository-projects: write
  contents: read

jobs:
  move-to-in-progress:
    runs-on: ubuntu-latest
    
    steps:
    - name: Move assigned issue from TODO to IN PROGRESS
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ORGANIZATION: ${{ github.repository_owner }}
        PROJECT_NUMBER: 2  # ALTERE para o n√∫mero do seu projeto
        
      run: |
        # Informa√ß√µes da issue
        ISSUE_ID="${{ github.event.issue.node_id }}"
        ISSUE_NUMBER="${{ github.event.issue.number }}"
        ASSIGNEE="${{ github.event.assignee.login }}"
        REPO_NAME="${{ github.repository }}"
        
        echo "üéØ Pipeline iniciado: Issue #$ISSUE_NUMBER ‚Üí $ASSIGNEE"
        
        # Fun√ß√£o para buscar projeto (tenta organiza√ß√£o primeiro, depois usu√°rio)
        find_project() {
          # Tentar buscar na organiza√ß√£o
          PROJECT_ID=$(gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org) {
                projectV2(number: $number) {
                  id
                  title
                }
              }
            }' -f org="$ORGANIZATION" -F number="$PROJECT_NUMBER" --jq '.data.organization.projectV2.id' 2>/dev/null || echo "")
          
          # Se n√£o encontrar na organiza√ß√£o, tentar no usu√°rio
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            PROJECT_ID=$(gh api graphql -f query='
              query($user: String!, $number: Int!) {
                user(login: $user) {
                  projectV2(number: $number) {
                    id
                    title
                  }
                }
              }' -f user="$ORGANIZATION" -F number="$PROJECT_NUMBER" --jq '.data.user.projectV2.id' 2>/dev/null || echo "")
          fi
          
          echo "$PROJECT_ID"
        }
        
        # Buscar o projeto
        PROJECT_ID=$(find_project)
        
        if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
          echo "‚ùå Projeto #$PROJECT_NUMBER n√£o encontrado"
          echo "Verifique se o n√∫mero est√° correto e se o projeto existe"
          exit 1
        fi
        
        echo "‚úÖ Projeto encontrado: $PROJECT_ID"
        
        # Buscar se a issue j√° est√° no projeto
        ITEM_ID=$(gh api graphql -f query='
          query($projectId: ID!, $issueId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                items(first: 100) {
                  nodes {
                    id
                    content {
                      ... on Issue {
                        id
                        number
                      }
                    }
                  }
                }
              }
            }
          }' -f projectId="$PROJECT_ID" -f issueId="$ISSUE_ID" --jq '.data.node.items.nodes[] | select(.content.id == "'$ISSUE_ID'") | .id')
        
        # Se a issue n√£o estiver no projeto, adicionar
        if [ -z "$ITEM_ID" ] || [ "$ITEM_ID" = "null" ]; then
          echo "üìå Adicionando issue ao projeto..."
          
          ITEM_ID=$(gh api graphql -f query='
            mutation($projectId: ID!, $contentId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                item {
                  id
                }
              }
            }' -f projectId="$PROJECT_ID" -f contentId="$ISSUE_ID" --jq '.data.addProjectV2ItemById.item.id')
          
          if [ -z "$ITEM_ID" ]; then
            echo "‚ùå Erro ao adicionar issue ao projeto"
            exit 1
          fi
          
          echo "‚úÖ Issue adicionada ao projeto: $ITEM_ID"
        else
          echo "‚úÖ Issue j√° existe no projeto: $ITEM_ID"
        fi
        
        # Buscar campos do projeto
        FIELDS_DATA=$(gh api graphql -f query='
          query($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                fields(first: 20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f projectId="$PROJECT_ID")
        
        # Buscar campo Status
        STATUS_FIELD_ID=$(echo "$FIELDS_DATA" | jq -r '.data.node.fields.nodes[] | select(.name | test("Status|status|Estado|estado")) | .id')
        
        if [ -z "$STATUS_FIELD_ID" ] || [ "$STATUS_FIELD_ID" = "null" ]; then
          echo "‚ùå Campo 'Status' n√£o encontrado no projeto"
          echo "Campos dispon√≠veis:"
          echo "$FIELDS_DATA" | jq -r '.data.node.fields.nodes[].name'
          exit 1
        fi
        
        echo "‚úÖ Campo Status encontrado: $STATUS_FIELD_ID"
        
        # Buscar op√ß√µes do campo Status
        STATUS_OPTIONS=$(echo "$FIELDS_DATA" | jq -r '.data.node.fields.nodes[] | select(.id == "'$STATUS_FIELD_ID'") | .options[]')
        
        # Buscar op√ß√£o "In Progress" (v√°rias varia√ß√µes)
        IN_PROGRESS_OPTION_ID=$(echo "$STATUS_OPTIONS" | jq -r 'select(.name | test("In Progress|IN PROGRESS|Em Progresso|Em andamento|Doing|DOING|Development|Desenvolvimento|Working|Trabalhando"; "i")) | .id')
        
        if [ -z "$IN_PROGRESS_OPTION_ID" ] || [ "$IN_PROGRESS_OPTION_ID" = "null" ]; then
          echo "‚ùå Op√ß√£o 'In Progress' n√£o encontrada"
          echo "Op√ß√µes dispon√≠veis no Status:"
          echo "$STATUS_OPTIONS" | jq -r '.name'
          exit 1
        fi
        
        echo "‚úÖ Op√ß√£o 'In Progress' encontrada: $IN_PROGRESS_OPTION_ID"
        
        # Atualizar o status da issue
        echo "üîÑ Movendo issue para 'In Progress'..."
        
        UPDATE_RESULT=$(gh api graphql -f query='
          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $projectId,
              itemId: $itemId,
              fieldId: $fieldId,
              value: {singleSelectOptionId: $optionId}
            }) {
              projectV2Item {
                id
              }
            }
          }' -f projectId="$PROJECT_ID" -f itemId="$ITEM_ID" -f fieldId="$STATUS_FIELD_ID" -f optionId="$IN_PROGRESS_OPTION_ID")
        
        if [ "$(echo "$UPDATE_RESULT" | jq -r '.data.updateProjectV2ItemFieldValue.projectV2Item.id')" != "null" ]; then
          echo "‚úÖ Issue #$ISSUE_NUMBER movida para 'In Progress' com sucesso!"
        else
          echo "‚ùå Erro ao atualizar status da issue"
          echo "$UPDATE_RESULT"
          exit 1
        fi
        
        # Adicionar coment√°rio na issue
        gh api repos/$REPO_NAME/issues/$ISSUE_NUMBER/comments \
          --method POST \
          --field body="üöÄ **Pipeline Autom√°tico**

Esta issue foi automaticamente movida para **In Progress** ap√≥s ser atribu√≠da para @$ASSIGNEE

üìä **Status**: TODO ‚Üí IN PROGRESS  
ü§ñ **A√ß√£o**: Autom√°tica via GitHub Actions  
‚è∞ **Data**: $(date '+%d/%m/%Y √†s %H:%M')"
        
        echo "üí¨ Coment√°rio adicionado na issue"
        echo "üéâ Pipeline conclu√≠do com sucesso!"
