name: Move Issue to In Progress on Assignment

on:
  issues:
    types: [assigned]

permissions:           # ‚Üê ADICIONE AQUI
  issues: write
  repository-projects: write
  contents: read

jobs:-
  move-to-in-progress:
    runs-on: ubuntu-latest
    
    steps:
    - name: Move assigned issue to In Progress
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ORGANIZATION: ${{ github.repository_owner }}
        PROJECT_NUMBER: 2  # Altere para o n√∫mero do seu projeto
        
      run: |
        # Obter informa√ß√µes da issue
        ISSUE_ID="${{ github.event.issue.node_id }}"
        ISSUE_NUMBER="${{ github.event.issue.number }}"
        ASSIGNEE="${{ github.event.assignee.login }}"
        
        echo "üîÑ Processando issue #$ISSUE_NUMBER atribu√≠da para $ASSIGNEE"
        
        # Buscar o project
        PROJECT_ID=$(gh api graphql -f query='
          query($org: String!, $number: Int!) {
            organization(login: $org) {
              projectV2(number: $number) {
                id
              }
            }
          }' -f org="$ORGANIZATION" -F number="$PROJECT_NUMBER" --jq '.data.organization.projectV2.id')
        
        if [ -z "$PROJECT_ID" ]; then
          echo "‚ùå Project #$PROJECT_NUMBER n√£o encontrado"
          exit 1
        fi
        
        echo "‚úÖ Project encontrado: $PROJECT_ID"
        
        # Buscar o item da issue no projeto
        ITEM_ID=$(gh api graphql -f query='
          query($projectId: ID!, $issueId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                items(first: 100) {
                  nodes {
                    id
                    content {
                      ... on Issue {
                        id
                      }
                    }
                  }
                }
              }
            }
          }' -f projectId="$PROJECT_ID" -f issueId="$ISSUE_ID" --jq '.data.node.items.nodes[] | select(.content.id == "'$ISSUE_ID'") | .id')
        
        if [ -z "$ITEM_ID" ]; then
          echo "‚ö†Ô∏è Issue n√£o encontrada no projeto, adicionando..."
          
          # Adicionar issue ao projeto
          ITEM_ID=$(gh api graphql -f query='
            mutation($projectId: ID!, $contentId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                item {
                  id
                }
              }
            }' -f projectId="$PROJECT_ID" -f contentId="$ISSUE_ID" --jq '.data.addProjectV2ItemById.item.id')
          
          echo "‚úÖ Issue adicionada ao projeto: $ITEM_ID"
        fi
        
        # Buscar o campo Status
        STATUS_FIELD_ID=$(gh api graphql -f query='
          query($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                fields(first: 20) {
                  nodes {
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f projectId="$PROJECT_ID" --jq '.data.node.fields.nodes[] | select(.name == "Status") | .id')
        
        # Buscar a op√ß√£o "In Progress"
        IN_PROGRESS_OPTION_ID=$(gh api graphql -f query='
          query($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                fields(first: 20) {
                  nodes {
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f projectId="$PROJECT_ID" --jq '.data.node.fields.nodes[] | select(.name == "Status") | .options[] | select(.name | test("In Progress|IN PROGRESS|In progress|Doing|DOING|Development")) | .id')
        
        if [ -z "$STATUS_FIELD_ID" ] || [ -z "$IN_PROGRESS_OPTION_ID" ]; then
          echo "‚ùå Campo Status ou op√ß√£o 'In Progress' n√£o encontrados"
          echo "Status Field ID: $STATUS_FIELD_ID"
          echo "In Progress Option ID: $IN_PROGRESS_OPTION_ID"
          exit 1
        fi
        
        # Atualizar o status da issue
        gh api graphql -f query='
          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $projectId
              itemId: $itemId
              fieldId: $fieldId
              value: $value
            }) {
              projectV2Item {
                id
              }
            }
          }' -f projectId="$PROJECT_ID" -f itemId="$ITEM_ID" -f fieldId="$STATUS_FIELD_ID" -f value="{\"singleSelectOptionId\":\"$IN_PROGRESS_OPTION_ID\"}"
        
        echo "‚úÖ Issue #$ISSUE_NUMBER movida para 'In Progress' com sucesso!"
        
        # Adicionar coment√°rio na issue
        gh api repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments \
          --method POST \
          --field body="üöÄ Esta issue foi automaticamente movida para **In Progress** ap√≥s ser atribu√≠da para @$ASSIGNEE"