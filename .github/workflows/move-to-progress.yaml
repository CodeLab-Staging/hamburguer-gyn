name: Move issue to In Progress

on:
  issues:
    types: [assigned]

jobs:
  move-to-in-progress:
    runs-on: ubuntu-latest

    steps:
      - name: Verificar repositório
        run: echo "Repositório detectado: $GITHUB_REPOSITORY"

      - name: Instalar GitHub CLI
        run: sudo apt-get install -y gh jq

      - name: Autenticar no GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "$GITHUB_TOKEN" | gh auth login --with-token

      - name: Obter informações da issue
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_NAME: ${{ github.repository }}
        run: |
          echo "Número da issue: $ISSUE_NUMBER"
          echo "Repositório: $REPO_NAME"
          ISSUE_DATA=$(gh api repos/$REPO_NAME/issues/$ISSUE_NUMBER)
          echo "$ISSUE_DATA" > issue.json
          TITLE=$(echo "$ISSUE_DATA" | jq -r .title)
          ASSIGNEE=$(echo "$ISSUE_DATA" | jq -r '.assignee.login // "não atribuído"')
          echo "Título da issue: $TITLE"
          echo "Responsável: $ASSIGNEE"
          echo "TITLE=$TITLE" >> $GITHUB_ENV
          echo "ASSIGNEE=$ASSIGNEE" >> $GITHUB_ENV

      - name: Obter ID do projeto
        env:
          REPO_NAME: ${{ github.repository }}
        run: |
          PROJECT_DATA=$(gh api graphql -f query='
          {
            repository(owner: "'${REPO_NAME%/*}'", name: "'${REPO_NAME#*/}'") {
              projectsV2(first: 10) {
                nodes {
                  id
                  title
                }
              }
            }
          }')
          echo "$PROJECT_DATA" | jq .
          PROJECT_ID=$(echo "$PROJECT_DATA" | jq -r '.data.repository.projectsV2.nodes[] | select(.title=="Kanban") | .id')
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "Projeto encontrado: $PROJECT_ID"

      - name: Obter campos do projeto
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
        run: |
          FIELDS=$(gh api graphql -f query='
          {
            node(id: "'$PROJECT_ID'") {
              ... on ProjectV2 {
                fields(first: 20) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }
          }')
          echo "$FIELDS" | jq .
          STATUS_FIELD_ID=$(echo "$FIELDS" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .id')
          echo "STATUS_FIELD_ID=$STATUS_FIELD_ID" >> $GITHUB_ENV
          echo "Campo Status: $STATUS_FIELD_ID"

      - name: Adicionar issue ao projeto
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_NAME: ${{ github.repository }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
        run: |
          ITEM_DATA=$(gh api graphql -f query='
          mutation {
            addProjectV2ItemById(input: {projectId: "'$PROJECT_ID'", contentId: "'$(gh api repos/$REPO_NAME/issues/$ISSUE_NUMBER --jq .node_id)'"}) {
              item {
                id
              }
            }
          }')
          echo "$ITEM_DATA" | jq .
          ITEM_ID=$(echo "$ITEM_DATA" | jq -r '.data.addProjectV2ItemById.item.id')
          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV
          echo "Item adicionado ao projeto: $ITEM_ID"

      - name: Atualizar status para In Progress
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          ITEM_ID: ${{ env.ITEM_ID }}
          STATUS_FIELD_ID: ${{ env.STATUS_FIELD_ID }}
        run: |
          OPTIONS=$(gh api graphql -f query='
          {
            node(id: "'$PROJECT_ID'") {
              ... on ProjectV2 {
                field(id: "'$STATUS_FIELD_ID'") {
                  ... on ProjectV2SingleSelectField {
                    options {
                      id
                      name
                    }
                  }
                }
              }
            }
          }')
          echo "$OPTIONS" | jq .
          INPROGRESS_OPTION_ID=$(echo "$OPTIONS" | jq -r '.data.node.field.options[] | select(.name=="In Progress") | .id')
          echo "INPROGRESS_OPTION_ID=$INPROGRESS_OPTION_ID" >> $GITHUB_ENV
          gh api graphql -f query='
          mutation {
            updateProjectV2ItemFieldValue(input: {
              projectId: "'$PROJECT_ID'",
              itemId: "'$ITEM_ID'",
              fieldId: "'$STATUS_FIELD_ID'",
              value: { singleSelectOptionId: "'$INPROGRESS_OPTION_ID'" }
            }) {
              projectV2Item {
                id
              }
            }
          }'
          echo "✅ Status atualizado para In Progress"

      - name: Comentar na issue
        env:
          REPO_NAME: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ASSIGNEE: ${{ env.ASSIGNEE }}
        run: |
          COMMENT_BODY=$(cat <<EOF
🚀 **Pipeline Automático**

Esta issue foi automaticamente movida para **In Progress** após ser atribuída para @$ASSIGNEE

📊 **Status**: TODO → IN PROGRESS  
🤖 **Ação**: Automática via GitHub Actions  
⏰ **Data**: $(date '+%d/%m/%Y às %H:%M')
EOF
)

          gh api repos/$REPO_NAME/issues/$ISSUE_NUMBER/comments \
            --method POST \
            --field body="$COMMENT_BODY"

          echo "💬 Comentário adicionado na issue"
          echo "🎉 Pipeline concluído com sucesso!"
