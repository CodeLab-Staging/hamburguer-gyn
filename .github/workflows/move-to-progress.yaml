name: Move Issue to In Progress

on:
  issues:
    types: [assigned]

permissions:
  issues: write
  repository-projects: write
  contents: read

jobs:
  move-to-in-progress:
    runs-on: ubuntu-latest
    if: github.event.issue.state == 'open'  # Só executa para issues abertas
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          type -p gh >/dev/null || {
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install -y gh jq
          }

      - name: Authenticate with GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$GITHUB_TOKEN" | gh auth login --with-token
          gh auth status

      - name: Get issue information
        id: get-issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          REPO="${{ github.repository }}"
          ASSIGNEE="${{ github.event.issue.assignee.login }}"

          echo "Processing Issue #$ISSUE_NUMBER assigned to $ASSIGNEE"

          # Get issue node_id using GraphQL
          ISSUE_NODE_ID=$(gh api graphql -f query='
            query($owner: String!, $repo: String!, $issueNumber: Int!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issueNumber) {
                  id
                  title
                  state
                }
              }
            }' -f owner="${REPO%/*}" -f repo="${REPO#*/}" -f issueNumber="$ISSUE_NUMBER" \
            --jq '.data.repository.issue.id')

          echo "ISSUE_NODE_ID=$ISSUE_NODE_ID" >> $GITHUB_ENV
          echo "ASSIGNEE=$ASSIGNEE" >> $GITHUB_ENV
          echo "Issue Node ID: $ISSUE_NODE_ID"

      - name: Find Kanban project
        id: find-project
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          OWNER="${REPO%/*}"

          echo "Searching for projects in $OWNER"

          # Search for projects in the organization/user
          PROJECT_DATA=$(gh api graphql -f query='
            query($owner: String!) {
              organization(login: $owner) {
                projectsV2(first: 20) {
                  nodes {
                    id
                    title
                    number
                  }
                }
              }
              user(login: $owner) {
                projectsV2(first: 20) {
                  nodes {
                    id
                    title
                    number
                  }
                }
              }
            }' -f owner="$OWNER")

          # Try to find Kanban project (case insensitive)
          PROJECT_ID=$(echo "$PROJECT_DATA" | jq -r '
            (.data.organization.projectsV2.nodes[]? // empty),
            (.data.user.projectsV2.nodes[]? // empty) |
            select(.title | test("Kanban"; "i")) | .id' | head -1)

          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            echo "❌ Kanban project not found"
            echo "Available projects:"
            echo "$PROJECT_DATA" | jq -r '
              [(.data.organization.projectsV2.nodes[]? | "Org: \(.title) (#\(.number))"),
               (.data.user.projectsV2.nodes[]? | "User: \(.title) (#\(.number))")] | .[]'
            exit 1
          fi

          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "✅ Found Kanban project: $PROJECT_ID"

      - name: Get project fields
        id: get-fields
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_ID="${{ env.PROJECT_ID }}"

          FIELDS_DATA=$(gh api graphql -f query='
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f projectId="$PROJECT_ID")

          # Find Status field
          STATUS_FIELD_ID=$(echo "$FIELDS_DATA" | jq -r '
            .data.node.fields.nodes[] | 
            select(.name | test("Status|status|Estado|estado"; "i")) | .id')

          if [ -z "$STATUS_FIELD_ID" ] || [ "$STATUS_FIELD_ID" = "null" ]; then
            echo "❌ Status field not found"
            echo "Available fields:"
            echo "$FIELDS_DATA" | jq -r '.data.node.fields.nodes[].name'
            exit 1
          fi

          echo "STATUS_FIELD_ID=$STATUS_FIELD_ID" >> $GITHUB_ENV
          echo "✅ Status field ID: $STATUS_FIELD_ID"

      - name: Check if issue is already in project
        id: check-existing-item
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_ID="${{ env.PROJECT_ID }}"
          ISSUE_NODE_ID="${{ env.ISSUE_NODE_ID }}"

          EXISTING_ITEM_ID=$(gh api graphql -f query='
            query($projectId: ID!, $issueId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  items(first: 100) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          id
                        }
                      }
                    }
                  }
                }
              }
            }' -f projectId="$PROJECT_ID" -f issueId="$ISSUE_NODE_ID" \
            --jq '.data.node.items.nodes[] | select(.content.id == "'$ISSUE_NODE_ID'") | .id')

          if [ -n "$EXISTING_ITEM_ID" ] && [ "$EXISTING_ITEM_ID" != "null" ]; then
            echo "ITEM_ID=$EXISTING_ITEM_ID" >> $GITHUB_ENV
            echo "✅ Issue already in project: $EXISTING_ITEM_ID"
          else
            echo "ℹ️ Issue not found in project, will be added"
          fi

      - name: Add issue to project
        id: add-to-project
        if: env.ITEM_ID == null || env.ITEM_ID == ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_ID="${{ env.PROJECT_ID }}"
          ISSUE_NODE_ID="${{ env.ISSUE_NODE_ID }}"

          echo "Adding issue to project..."

          ADD_RESULT=$(gh api graphql -f query='
            mutation($projectId: ID!, $contentId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                item {
                  id
                }
              }
            }' -f projectId="$PROJECT_ID" -f contentId="$ISSUE_NODE_ID")

          NEW_ITEM_ID=$(echo "$ADD_RESULT" | jq -r '.data.addProjectV2ItemById.item.id')

          if [ -z "$NEW_ITEM_ID" ] || [ "$NEW_ITEM_ID" = "null" ]; then
            echo "❌ Failed to add issue to project"
            echo "$ADD_RESULT"
            exit 1
          fi

          echo "ITEM_ID=$NEW_ITEM_ID" >> $GITHUB_ENV
          echo "✅ Issue added to project: $NEW_ITEM_ID"

      - name: Update status to In Progress
        id: update-status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_ID="${{ env.PROJECT_ID }}"
          ITEM_ID="${{ env.ITEM_ID }}"
          STATUS_FIELD_ID="${{ env.STATUS_FIELD_ID }}"

          echo "Updating status for item: $ITEM_ID"

          STATUS_OPTIONS=$(gh api graphql -f query='
            query($projectId: ID!, $fieldId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  field(id: $fieldId) {
                    ... on ProjectV2SingleSelectField {
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }' -f projectId="$PROJECT_ID" -f fieldId="$STATUS_FIELD_ID" \
            --jq '.data.node.field.options[]')

          IN_PROGRESS_OPTION_ID=$(echo "$STATUS_OPTIONS" | jq -r '
            select(.name | test("In Progress|IN PROGRESS|Em Progresso|Em andamento|Doing|DOING"; "i")) | .id' | head -1)

          if [ -z "$IN_PROGRESS_OPTION_ID" ] || [ "$IN_PROGRESS_OPTION_ID" = "null" ]; then
            echo "❌ In Progress option not found"
            echo "Available options:"
            echo "$STATUS_OPTIONS" | jq -r '.name'
            exit 1
          fi

          echo "In Progress option ID: $IN_PROGRESS_OPTION_ID"

          UPDATE_RESULT=$(gh api graphql -f query='
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $fieldId,
                value: {singleSelectOptionId: $optionId}
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f projectId="$PROJECT_ID" -f itemId="$ITEM_ID" -f fieldId="$STATUS_FIELD_ID" -f optionId="$IN_PROGRESS_OPTION_ID")

          if [ "$(echo "$UPDATE_RESULT" | jq -r '.data.updateProjectV2ItemFieldValue.projectV2Item.id')" != "null" ]; then
            echo "✅ Status updated to In Progress successfully!"
          else
            echo "❌ Failed to update status"
            echo "$UPDATE_RESULT"
            exit 1
          fi

      - name: Add comment to issue
        id: add-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ASSIGNEE="${{ env.ASSIGNEE }}"

          COMMENT_BODY=$(cat <<EOF
🚀 **Pipeline Automático**

Esta issue foi automaticamente movida para **In Progress** após ser atribuída para @$ASSIGNEE

📊 **Status**: TODO → IN PROGRESS  
🤖 **Ação**: Automática via GitHub Actions  
⏰ **Data**: $(date '+%d/%m/%Y às %H:%M')
EOF
)

          gh api repos/$REPO/issues/$ISSUE_NUMBER/comments \
            --method POST \
            --field body="$COMMENT_BODY"

          echo "💬 Comment added to issue #$ISSUE_NUMBER"

      - name: Success message
        run: |
          echo "🎉 Pipeline completed successfully!"
          echo "Issue #${{ github.event.issue.number }} moved to In Progress and added to Kanban project"
