name: Move issue to In Progress

on:
  issues:
    types: [assigned]

permissions:
  issues: write
  repository-projects: write
  contents: read

jobs:
  move-to-in-progress:
    runs-on: ubuntu-latest

    steps:
      - name: Verificar repositório
        run: echo "Repositório detectado: $GITHUB_REPOSITORY"

      - name: Instalar GitHub CLI e jq
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: Autenticar no GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "$GITHUB_TOKEN" | gh auth login --with-token

      - name: Obter informações da issue
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_NAME: ${{ github.repository }}
        run: |
          echo "Número da issue: $ISSUE_NUMBER"
          echo "Repositório: $REPO_NAME"
          
          # Obter dados da issue usando GraphQL para pegar o node_id
          ISSUE_DATA=$(gh api graphql -f query='
            query($owner: String!, $repo: String!, $issueNumber: Int!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issueNumber) {
                  id
                  title
                  number
                  assignees(first: 1) {
                    nodes {
                      login
                    }
                  }
                }
              }
            }' -f owner="${REPO_NAME%/*}" -f repo="${REPO_NAME#*/}" -f issueNumber="$ISSUE_NUMBER")
          
          echo "Dados da issue:"
          echo "$ISSUE_DATA" | jq .
          
          ISSUE_ID=$(echo "$ISSUE_DATA" | jq -r '.data.repository.issue.id')
          TITLE=$(echo "$ISSUE_DATA" | jq -r '.data.repository.issue.title')
          ASSIGNEE=$(echo "$ISSUE_DATA" | jq -r '.data.repository.issue.assignees.nodes[0].login // "não atribuído"')
          
          echo "ID da issue: $ISSUE_ID"
          echo "Título da issue: $TITLE"
          echo "Responsável: $ASSIGNEE"
          
          echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
          echo "TITLE=$TITLE" >> $GITHUB_ENV
          echo "ASSIGNEE=$ASSIGNEE" >> $GITHUB_ENV

      - name: Obter projetos disponíveis
        env:
          REPO_NAME: ${{ github.repository }}
        run: |
          OWNER="${REPO_NAME%/*}"
          REPO="${REPO_NAME#*/}"
          
          echo "Buscando projetos para: $OWNER/$REPO"
          
          # Buscar projetos do repositório
          PROJECTS_DATA=$(gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                projectsV2(first: 10) {
                  nodes {
                    id
                    title
                    number
                  }
                }
              }
            }' -f owner="$OWNER" -f repo="$REPO")
          
          echo "Projetos encontrados:"
          echo "$PROJECTS_DATA" | jq .
          
          # Tentar encontrar projeto Kanban (case insensitive)
          PROJECT_ID=$(echo "$PROJECTS_DATA" | jq -r '.data.repository.projectsV2.nodes[] | select(.title | test("Kanban"; "i")) | .id')
          
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            echo "❌ Projeto 'Kanban' não encontrado no repositório"
            echo "📋 Lista de projetos disponíveis:"
            echo "$PROJECTS_DATA" | jq -r '.data.repository.projectsV2.nodes[] | "\(.number) - \(.title)"'
            exit 1
          fi
          
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "✅ Projeto Kanban encontrado: $PROJECT_ID"

      - name: Obter campos do projeto
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
        run: |
          FIELDS_DATA=$(gh api graphql -f query='
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f projectId="$PROJECT_ID")
          
          echo "Campos do projeto:"
          echo "$FIELDS_DATA" | jq .
          
          # Buscar campo Status (case insensitive)
          STATUS_FIELD_ID=$(echo "$FIELDS_DATA" | jq -r '.data.node.fields.nodes[] | select(.name | test("Status|status|Estado|estado"; "i")) | .id')
          
          if [ -z "$STATUS_FIELD_ID" ] || [ "$STATUS_FIELD_ID" = "null" ]; then
            echo "❌ Campo 'Status' não encontrado no projeto"
            echo "📋 Campos disponíveis:"
            echo "$FIELDS_DATA" | jq -r '.data.node.fields.nodes[].name'
            exit 1
          fi
          
          echo "STATUS_FIELD_ID=$STATUS_FIELD_ID" >> $GITHUB_ENV
          echo "✅ Campo Status encontrado: $STATUS_FIELD_ID"

      - name: Verificar se issue já está no projeto
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          ISSUE_ID: ${{ env.ISSUE_ID }}
        run: |
          ITEM_ID=$(gh api graphql -f query='
            query($projectId: ID!, $issueId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  items(first: 100) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          id
                        }
                      }
                    }
                  }
                }
              }
            }' -f projectId="$PROJECT_ID" -f issueId="$ISSUE_ID" --jq '.data.node.items.nodes[] | select(.content.id == "'$ISSUE_ID'") | .id')
          
          if [ -n "$ITEM_ID" ] && [ "$ITEM_ID" != "null" ]; then
            echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV
            echo "✅ Issue já está no projeto: $ITEM_ID"
          else
            echo "📌 Issue não encontrada no projeto, será adicionada"
          fi

      - name: Adicionar issue ao projeto (se necessário)
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          ISSUE_ID: ${{ env.ISSUE_ID }}
        run: |
          if [ -z "${{ env.ITEM_ID }}" ] || [ "${{ env.ITEM_ID }}" = "null" ]; then
            echo "Adicionando issue ao projeto..."
            ITEM_DATA=$(gh api graphql -f query='
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }' -f projectId="$PROJECT_ID" -f contentId="$ISSUE_ID")
            
            echo "$ITEM_DATA" | jq .
            
            ITEM_ID=$(echo "$ITEM_DATA" | jq -r '.data.addProjectV2ItemById.item.id')
            
            if [ -z "$ITEM_ID" ] || [ "$ITEM_ID" = "null" ]; then
              echo "❌ Erro ao adicionar issue ao projeto"
              exit 1
            fi
            
            echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV
            echo "✅ Issue adicionada ao projeto: $ITEM_ID"
          else
            echo "⏭️ Issue já está no projeto, pulando adição"
          fi

      - name: Atualizar status para In Progress
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          ITEM_ID: ${{ env.ITEM_ID }}
          STATUS_FIELD_ID: ${{ env.STATUS_FIELD_ID }}
        run: |
          # Buscar opções do campo Status
          FIELDS_DATA=$(gh api graphql -f query='
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f projectId="$PROJECT_ID")
          
          # Buscar opções do campo Status específico
          STATUS_OPTIONS=$(echo "$FIELDS_DATA" | jq -r '.data.node.fields.nodes[] | select(.id == "'$STATUS_FIELD_ID'") | .options[]?')
          
          # Buscar opção "In Progress" (várias variações possíveis)
          IN_PROGRESS_OPTION_ID=$(echo "$STATUS_OPTIONS" | jq -r 'select(.name | test("In Progress|IN PROGRESS|Em Progresso|Em andamento|Doing|DOING|Development|Desenvolvimento"; "i")) | .id')
          
          if [ -z "$IN_PROGRESS_OPTION_ID" ] || [ "$IN_PROGRESS_OPTION_ID" = "null" ]; then
            echo "❌ Opção 'In Progress' não encontrada"
            echo "📋 Opções disponíveis no Status:"
            echo "$STATUS_OPTIONS" | jq -r '.name'
            exit 1
          fi
          
          echo "IN_PROGRESS_OPTION_ID=$IN_PROGRESS_OPTION_ID" >> $GITHUB_ENV
          echo "✅ Opção 'In Progress' encontrada: $IN_PROGRESS_OPTION_ID"
          
          # Atualizar status
          UPDATE_RESULT=$(gh api graphql -f query='
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $fieldId,
                value: {singleSelectOptionId: $optionId}
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f projectId="$PROJECT_ID" -f itemId="$ITEM_ID" -f fieldId="$STATUS_FIELD_ID" -f optionId="$IN_PROGRESS_OPTION_ID")
          
          if [ "$(echo "$UPDATE_RESULT" | jq -r '.data.updateProjectV2ItemFieldValue.projectV2Item.id')" != "null" ]; then
            echo "✅ Status atualizado para 'In Progress' com sucesso!"
          else
            echo "❌ Erro ao atualizar status da issue"
            echo "$UPDATE_RESULT"
            exit 1
          fi

      - name: Comentar na issue
        env:
          REPO_NAME: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ASSIGNEE: ${{ env.ASSIGNEE }}
        run: |
          COMMENT_BODY="🚀 **Pipeline Automático**

Esta issue foi automaticamente movida para **In Progress** após ser atribuída para @$ASSIGNEE

📊 **Status**: TODO → IN PROGRESS  
🤖 **Ação**: Automática via GitHub Actions  
⏰ **Data**: $(date '+%d/%m/%Y às %H:%M')"
          
          gh api repos/$REPO_NAME/issues/$ISSUE_NUMBER/comments \
            --method POST \
            --field body="$COMMENT_BODY"
          
          echo "💬 Comentário adicionado na issue"
          echo "🎉 Pipeline concluído com sucesso!"
